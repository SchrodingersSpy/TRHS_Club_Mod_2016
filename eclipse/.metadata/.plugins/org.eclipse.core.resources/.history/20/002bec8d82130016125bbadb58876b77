package epidemiccraft.tileentity;

import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import epidemiccraft.blocks.Autoclave;
import epidemiccraft.com.AutoclaveRecipes;
import net.minecraft.block.Block;
import net.minecraft.block.BlockFurnace;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.tileentity.TileEntity;

public class TileEntityAutoclave extends TileEntity implements ISidedInventory{

	private static final int[] slotsTop = new int[]{0};
	private static final int[] slotsBottom = new int[]{2, 1};
	private static final int[] slotsSides = new int[]{1};
	
	private ItemStack[] furnaceItemStacks = new ItemStack[3];
	
	public int furnaceBurnTime;
	public int currentBurnTime;
	public int furnaceCookTime;
	public int direction;
	
	private String furnaceName;
	
	public void furnaceName(String string){
		this.furnaceName = string;
	}
	
	@Override
	public int getSizeInventory() {
		return this.furnaceItemStacks.length;
	}

	@Override
	public ItemStack getStackInSlot(int par1) {
		return this.furnaceItemStacks[par1];
	}

	@Override
    public ItemStack decrStackSize(int par1, int par2){
        ItemStack itemstack = getStackInSlot(par1);
        if (itemstack != null){
            if (itemstack.stackSize <= par2){
                setInventorySlotContents(par1, null);
            }
            else{
                itemstack = itemstack.splitStack(par2);
                // Mark dirty seems to handle this for me, but I left it in your
                // code just in case
                if (this.furnaceItemStacks[par1].stackSize == 0){
                    this.furnaceItemStacks[par1] = null;
                }
            }
            this.markDirty();
        }
        // Returns null if it is null, otherwise it returns the itemstack that
        // was changed inside the if statements
        return itemstack;
    }

	 @Override
	    public ItemStack getStackInSlotOnClosing(int par1){
	        ItemStack itemstack = getStackInSlot(par1);
	        // Uses your own function to set the inventory instead of manually, and
	        // it auto calls markDirty() for you then.
	        setInventorySlotContents(par1, null);
	        // Once again, returns null if it is null otherwise the itemstack was
	        // set to something and returned.
	        return itemstack;
	    }

	 @Override
	 public void setInventorySlotContents(int par1, ItemStack itemstack){
	     furnaceItemStacks[par1] = itemstack;
	     if (itemstack != null && itemstack.stackSize > getInventoryStackLimit()){
	         itemstack.stackSize = getInventoryStackLimit();
	     }
	     // Just added a markDirty().
	     this.markDirty();
	 }

	@Override
	public String getInventoryName() {
		return this.hasCustomInventoryName() ? this.furnaceName : "Autoclave";
	}

	@Override
	public boolean hasCustomInventoryName() {
		return this.furnaceName != null && this.furnaceName.length() > 0;
	}

	@Override
	public int getInventoryStackLimit() {
		return 64;
	}
	
	@Override
	public Packet getDescriptionPacket()
	    {
	    	NBTTagCompound nbt = new NBTTagCompound();
	    	writeToNBT(nbt);
	        return new S35PacketUpdateTileEntity(this.xCoord, this.yCoord, this.zCoord, 1, nbt);
	    }
	   
	@Override
	    public void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt)
	    {
		 	readFromNBT(pkt.func_148857_g());
	    	super.onDataPacket(net, pkt);
	    	this.blockMetadata = pkt.func_148857_g().getInteger("BlockMetadata");
	    }
	
	public void markForUpdate() {
	    worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
	}
	
	 public void readFromNBT(NBTTagCompound tagCompound){
	        super.readFromNBT(tagCompound);
	        // Used tagCompound.getId() instead of 10.
	        NBTTagList tagList = tagCompound.getTagList("Items", tagCompound.getId());
	        // You had this line. I think this was reseting the inventory, even
	        // though it looks like it was resetting before being read into. Still,
	        // I got rid of this.
	        // this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
	        for (int i = 0; i < tagList.tagCount(); ++i){
	            // Gave the variables more meaningful names.
	            NBTTagCompound item = tagList.getCompoundTagAt(i);
	            byte slot = item.getByte("Slot");
	            // Using your classes' getSizeInventory because although it is
	            // "technically slower", it is more easily readible. The change will
	            // not ever be noticed. Personal preference.
	            if (slot >= 0 && slot < this.getSizeInventory()){
	                this.furnaceItemStacks[slot] = ItemStack.loadItemStackFromNBT(item);
	            }
	        }
	        // Changed to getInteger seeing how the class has them already declared as integers.
	        this.furnaceBurnTime = tagCompound.getInteger("BurnTime");
	        this.furnaceCookTime = tagCompound.getInteger("CookTime");
	        // Not sure what you are doing this for, but you said that the smelting
	        // was working so I left this.
	        this.currentBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
	        // You aren't ever saving a name in the writeToNBT?!
	        if (tagCompound.hasKey("CustomName", 8)){
	            this.furnaceName = tagCompound.getString("CustomName");
	        }
	 
	    }
	
	 public void writeToNBT(NBTTagCompound tagCompound){
	        super.writeToNBT(tagCompound);
	        // changed variables to be more meaningful
	        NBTTagList items = new NBTTagList();
	        for (int i = 0; i < getSizeInventory(); i++){
	            ItemStack stack = this.getStackInSlot(i);
	            if (stack != null){
	                NBTTagCompound writeitem = new NBTTagCompound();
	                // You had it writing to the wrong tag compound.
	                writeitem.setByte("Slot", (byte) i);
	                // You also were writing the entire stack each time, instead of just looping through it with the for loop.
	                stack.writeToNBT(writeitem);
	                items.appendTag(writeitem);
	            }
	        }
	        // Changed to setInteger seeing how the class has them already declared as integers.
	        tagCompound.setInteger("BurnTime", this.furnaceBurnTime);
	        tagCompound.setInteger("CookTime", this.furnaceBurnTime);
	    }
	
	
	
	@SideOnly(Side.CLIENT)
	public int getCookProgressScaled(int par1){
		return this.furnaceCookTime * par1 / 200;
	}
	
	@SideOnly(Side.CLIENT)
	public int getBurnTimeRemainingScaled(int par1){
		if(this.currentBurnTime == 0){
			this.currentBurnTime = 200;
		}
		return this.furnaceBurnTime * par1 / this.currentBurnTime;
	}
	
	public boolean isBurning(){
		return this.furnaceBurnTime > 0;
	}
	 public void updateEntity()
	    {
	        boolean flag = this.furnaceBurnTime > 0;
	        boolean flag1 = false;

	        if (this.furnaceBurnTime > 0)
	        {
	            --this.furnaceBurnTime;
	        }

	        if (!this.worldObj.isRemote)
	        {
	            if (this.furnaceBurnTime != 0 || this.furnaceItemStacks[1] != null && this.furnaceItemStacks[0] != null)
	            {
	                if (this.furnaceBurnTime == 0 && this.canSmelt())
	                {
	                    this.currentBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);

	                    if (this.furnaceBurnTime > 0)
	                    {
	                        flag1 = true;

	                        if (this.furnaceItemStacks[1] != null)
	                        {
	                            --this.furnaceItemStacks[1].stackSize;

	                            if (this.furnaceItemStacks[1].stackSize == 0)
	                            {
	                                this.furnaceItemStacks[1] = furnaceItemStacks[1].getItem().getContainerItem(furnaceItemStacks[1]);
	                            }
	                        }
	                    }
	                }

	                if (this.isBurning() && this.canSmelt())
	                {
	                    ++this.furnaceCookTime;

	                    if (this.furnaceCookTime == 200)
	                    {
	                        this.furnaceCookTime = 0;
	                        this.smeltItem();
	                        flag1 = true;
	                    }
	                }
	                else
	                {
	                    this.furnaceCookTime = 0;
	                }
	            }

	            if (flag != this.furnaceBurnTime > 0)
	            {
	                flag1 = true;
	                Autoclave.updateBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
	            }
	        }

	        this.markDirty();
	        worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
	    }
	
	private boolean canSmelt(){
		if(this.furnaceItemStacks[0] == null){
			return false;
		} else{
			ItemStack itemstack = AutoclaveRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
			if(itemstack == null) return false;
			if(this.furnaceItemStacks[2] == null) return true;
			if(!this.furnaceItemStacks[2].isItemEqual(itemstack)) return false;
			int result = furnaceItemStacks[2].stackSize + itemstack.stackSize;
			return result <= getInventoryStackLimit() && result <= this.furnaceItemStacks[2].getMaxStackSize();
		}
	}
	
	public void smeltItem(){
		if(this.canSmelt()){
			ItemStack itemstack = AutoclaveRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
			
			if(this.furnaceItemStacks[2] == null){
				this.furnaceItemStacks[2] = itemstack.copy();
			}else if(this.furnaceItemStacks[2].getItem() == itemstack.getItem()){
			this.furnaceItemStacks[2].stackSize += itemstack.stackSize;
			}
			--this.furnaceItemStacks[0].stackSize;
			
			if(this.furnaceItemStacks[0].stackSize == 0){
				this.furnaceItemStacks[0] = null;
			}
		}
	}
	
	public static int getItemBurnTime(ItemStack itemstack){
		if (itemstack == null){
			return 0;
		} else{
			Item item = itemstack.getItem();
			if(item instanceof ItemBlock && Block.getBlockFromItem(item) != Blocks.air){
				Block block = Block.getBlockFromItem(item);
				
				if(block == Blocks.snow){
					return 800;
				}
				if(block == Blocks.ice){
					return 800;
				}
				if(block == Blocks.packed_ice){
					return 800;
				}
			}
			if(item == Items.water_bucket) return 1600;
			if(item == Items.potionitem) return 200;
			return 0;
		}
	}
	
	public static boolean isItemFuel(ItemStack itemstack){
		return getItemBurnTime(itemstack) > 0;
	}
	
	@Override
	public boolean isUseableByPlayer(EntityPlayer player) {
		return true;
	}

	@Override
	public void openInventory() {

		
	}

	@Override
	public void closeInventory() {

		
	}

	@Override
	public boolean isItemValidForSlot(int par1, ItemStack itemstack) {
		return par1 == 2 ? false : (par1 == 1 ? isItemFuel(itemstack) : true);
	}

	@Override
	public int[] getAccessibleSlotsFromSide(int par1) {
		return par1 == 0 ? slotsBottom : (par1 == 1 ? slotsTop : slotsSides);
	}

	@Override
	public boolean canInsertItem(int par1, ItemStack itemstack, int par3) {
		return this.isItemValidForSlot(par1, itemstack);
	}

	@Override
	public boolean canExtractItem(int par1, ItemStack itemstack, int par3) {
		return par3 != 0 || par1 != 1 || itemstack.getItem() == Items.bucket;
	}

}
